<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TerrariansConstructLib</name>
    </assembly>
    <members>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`1">
            <summary>
            Reflection helper for accessing <typeparamref name="T"/> fields with an unspecified type
            </summary>
            <typeparam name="T">The declaring type</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.InvokeGetterFunction(System.String,`0)">
            <summary>
            Creates the getter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/> if necessary, then invokes it
            </summary>
            <param name="field">The name of the field</param>
            <param name="instance">The instance.  If the field is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <returns>The boxed value of the field</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.InvokeSetterFunction(System.String,`0,System.Object)">
            <summary>
            Creates the setter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/> if necessary, then invokes it
            </summary>
            <param name="field">The name of the field</param>
            <param name="instance">The instance.  If the field is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="obj">The boxed value to set the field to</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.CreateGetAccessor(System.String,System.String@)">
            <summary>
            Creates the getter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/>
            </summary>
            <param name="field">The name of the field</param>
            <param name="name">The key used to access the getter delegate</param>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.CreateSetAccessor(System.String,System.String@)">
            <summary>
            Creates the setter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/>
            </summary>
            <param name="field">The name of the field</param>
            <param name="name">The key used to access the setter delegate</param>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage">
            <summary>
            A wrapper class for easily using delegates created by <seealso cref="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`1"/>
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.field">
            <summary>
            The name of the field being accessed
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.#ctor(System.String)">
            <summary>
            Constructs a getter and setter delegate for the field <paramref name="field"/> in <typeparamref name="T"/>
            </summary>
            <param name="field">The name of the field</param>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.GetValue(`0)">
            <summary>
            Calls the generated getter function for the package's field
            </summary>
            <param name="instance">The instance.  If the field is <see langword="static" />, pass <see langword="null" /> for this parameter.</param>
            <returns>The boxed value for the field</returns>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.SetValue(`0,System.Object)">
            <summary>
            Calls the generated setter function for the package's field
            </summary>
            <param name="instance">The instance.  If the field is <see langword="static" />, pass <see langword="null" /> for this parameter.</param>
            <param name="value">The value to set the field to</param>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`1">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and no parameters
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`1.InvokeMethod(System.String,`0)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`1.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperReturn`2">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and no parameters
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperReturn`2.InvokeMethod(System.String,`0)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperReturn`2.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`2">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and a <typeparamref name="TArg"/> argument
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`2.InvokeMethod(System.String,`0,`1)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`2.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`3">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and a <typeparamref name="TArg"/> argument
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`3.InvokeMethod(System.String,`0,`1)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`3.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`3">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`3.InvokeMethod(System.String,`0,`1,`2)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`3.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`4">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`4.InvokeMethod(System.String,`0,`1,`2)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`4.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`4">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>, <typeparamref name="TArg3"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
            <typeparam name="TArg3">The type of the third argument</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`4.InvokeMethod(System.String,`0,`1,`2,`3)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <param name="arg3">The third argument</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`4.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`5">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>, <typeparamref name="TArg3"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
            <typeparam name="TArg3">The type of the third argument</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`5.InvokeMethod(System.String,`0,`1,`2,`3)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <param name="arg3">The third argument</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`5.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.RegisterPart(Terraria.ModLoader.Mod,System.String,System.String,System.String)">
            <summary>
            Registers a part definition
            </summary>
            <param name="mod">The mod that the part belongs to</param>
            <param name="internalName">The internal name of the part</param>
            <param name="name">The name of the part</param>
            <param name="assetFolderPath">The path to the folder containing the part's textures</param>
            <returns>The ID of the registered part</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.RegisterAmmo``1(Terraria.ModLoader.Mod,System.String,System.Int32)">
            <summary>
            Registers a name and <seealso cref="T:Terraria.ID.ItemID"/>/<seealso cref="T:Terraria.ID.AmmoID"/> for the next constructed ammo type to be assigned an ID
            </summary>
            <param name="mod">The mod that the ammo belongs to</param>
            <param name="name">The name of the constructed ammo type</param>
            <param name="ammoID"></param>
            <typeparam name="T">The type of the projectile to spawn when using the ammo</typeparam>
            <returns>The ID of the registered constructed ammo type</returns>
            <remarks>Note: The returned ID does not correlate with <seealso cref="T:Terraria.ID.AmmoID"/> nor <seealso cref="T:Terraria.ID.ItemID"/></remarks>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.RegisterItem``1(Terraria.ModLoader.Mod,System.String,System.String,System.Int32[])">
            <summary>
            Registers a name and valid <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/> IDs for an item
            </summary>
            <typeparam name="T">The <see langword="class"/> of the <seealso cref="T:TerrariansConstructLib.Items.BaseTCItem"/> associated with this registered item type</typeparam>
            <param name="mod">The mod that the weapon belongs to</param>
            <param name="internalName">The internal name of the weapon</param>
            <param name="name">The default item type name used by <seealso cref="P:TerrariansConstructLib.Items.BaseTCItem.RegisteredItemTypeName"/></param>
            <param name="validPartIDs">The array of parts that comprise the weapon</param>
            <returns>The ID of the registered item</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetPartName(System.Int32)">
            <summary>
            Gets the name of a registered part
            </summary>
            <param name="id">The ID of the part to get</param>
            <returns>The name of the registered part, or throws an exception if a part of type <paramref name="id"/> does not exist</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetAmmoName(System.Int32)">
            <summary>
            Gets the name of a registered constructed ammo type
            </summary>
            <param name="constructedAmmoID">The ID of the constructed ammo type to get</param>
            <returns>The name of the registered constructed ammo type, or throws an exception if a constructed ammo type of type <paramref name="constructedAmmoID"/> does not exist</returns>
            <exception cref="T:System.Exception"/>
            <remarks>Note: The input ID does not correlate with <seealso cref="T:Terraria.ID.AmmoID"/> nor <seealso cref="T:Terraria.ID.ItemID"/></remarks>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetAmmoID(System.Int32)">
            <summary>
            Gets the <seealso cref="T:Terraria.ID.ItemID"/>/<seealso cref="T:Terraria.ID.AmmoID"/> of a registered constructed ammo type
            </summary>
            <param name="constructedAmmoID">The ID of the constructed ammo type to get</param>
            <returns>The <seealso cref="T:Terraria.ID.ItemID"/>/<seealso cref="T:Terraria.ID.AmmoID"/> of the registered constructed ammo type, or throws an exception if a constructed ammo type of type <paramref name="constructedAmmoID"/> does not exist</returns>
            <exception cref="T:System.Exception"/>
            <remarks>Note: The input ID does not correlate with <seealso cref="T:Terraria.ID.AmmoID"/> nor <seealso cref="T:Terraria.ID.ItemID"/></remarks>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetAmmoProjectileType(System.Int32)">
            <summary>
            Gets the projectile ID of a registered constructed ammo type
            </summary>
            <param name="constructedAmmoID">The ID of the constructed ammo type to get</param>
            <returns>The <seealso cref="T:Terraria.ID.ItemID"/>/<seealso cref="T:Terraria.ID.AmmoID"/> of the registered constructed ammo type, or throws an exception if a constructed ammo type of type <paramref name="constructedAmmoID"/> does not exist</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemName(System.Int32)">
            <summary>
            Gets the name for a registered item
            </summary>
            <param name="registeredItemID">The ID for the registered item.  Not to be confused with its <seealso cref="T:Terraria.ID.ItemID"/> or <seealso cref="P:Terraria.ModLoader.ModItem.Type"/></param>
            <returns>The name for the registered item</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemInternalName(System.Int32)">
            <summary>
            Gets the internal name for a registered item
            </summary>
            <param name="registeredItemID">The ID for the registered item.  Not to be confused with its <seealso cref="T:Terraria.ID.ItemID"/> or <seealso cref="P:Terraria.ModLoader.ModItem.Type"/></param>
            <returns>The internal name for the registered item</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemValidPartIDs(System.Int32)">
            <summary>
            Gets a clone of the valid part IDs for a registered item
            </summary>
            <param name="registeredItemID">The ID for the registered item.  Not to be confused with its <seealso cref="T:Terraria.ID.ItemID"/> or <seealso cref="P:Terraria.ModLoader.ModItem.Type"/></param>
            <returns>A clone of the valid part IDs for the registered item</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.FindItem(System.Int32[])">
            <summary>
            Attempts to find a registered item whose valid part IDs are set to the same values as <paramref name="partIDs"/>
            </summary>
            <param name="partIDs">The part IDs to check</param>
            <returns>A value &gt;= <c>0</c> and &lt; <seealso cref="P:TerrariansConstructLib.Registry.ItemRegistry.Count"/> if successful, <c>-1</c> otherwise</returns>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.TryFindItem(System.Int32[],System.Int32@)">
            <summary>
            Attempts to find a registered item whose valid part IDs are set to the same values as <paramref name="partIDs"/>
            </summary>
            <param name="partIDs">The part IDs to check</param>
            <param name="registeredItemID">A value &gt;= <c>0</c> and &lt; <seealso cref="P:TerrariansConstructLib.Registry.ItemRegistry.Count"/> if successful, <c>-1</c> otherwise</param>
            <returns><see langword="true"/> if the search was successful, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemPart(TerrariansConstructLib.Materials.Material,System.Int32)">
            <summary>
            Gets an <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/> instance from a material and part ID
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <returns>The <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/> instance</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.AddAllPartsOfType(Terraria.ModLoader.Mod,System.Int32,System.Int32,TerrariansConstructLib.ItemPartActionsBuilder,System.String,System.Int32[])">
            <summary>
            Registers the part items for the material, <paramref name="materialType"/>, with the given rarity, <paramref name="rarity"/>
            </summary>
            <param name="mod">The mod instance to add the part to</param>
            <param name="materialType">The item ID</param>
            <param name="rarity">The item rarity</param>
            <param name="actions">The actions</param>
            <param name="tooltipForAllParts">The tooltip that will be assigned to all parts.  Can be modified via <seealso cref="M:TerrariansConstructLib.Items.ItemPart.SetTooltip(TerrariansConstructLib.Materials.Material,System.Int32,System.String)"/></param>
            <param name="partIDsToIgnore">The IDs to ignore when iterating to create the part items</param>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.AddAllPartsOfMaterial(Terraria.ModLoader.Mod,TerrariansConstructLib.Materials.Material,TerrariansConstructLib.ItemPartActionsBuilder,System.String,System.Int32[])">
            <summary>
            Registers the part items for the material, <paramref name="material"/>
            </summary>
            <param name="mod">The mod instance to add the part to</param>
            <param name="material">The material instance</param>
            <param name="actions">The actions</param>
            <param name="tooltipForAllParts">The tooltip that will be assigned to all parts.  Can be modified via <seealso cref="M:TerrariansConstructLib.Items.ItemPart.SetTooltip(TerrariansConstructLib.Materials.Material,System.Int32,System.String)"/></param>
            <param name="partIDsToIgnore">The IDs to ignore when iterating to create the part items</param>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.AddPart(Terraria.ModLoader.Mod,TerrariansConstructLib.Materials.Material,System.Int32,TerrariansConstructLib.ItemPartActionsBuilder,System.String)">
            <summary>
            Registers a part item for the material, <paramref name="material"/>
            </summary>
            <param name="mod">The mod instance to add the part to</param>
            <param name="material">The material instance</param>
            <param name="partID">The part ID</param>
            <param name="actions">The actions</param>
            <param name="tooltip">The tooltip for this part.  Can be modified via <seealso cref="M:TerrariansConstructLib.Items.ItemPart.SetTooltip(TerrariansConstructLib.Materials.Material,System.Int32,System.String)"/></param>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.AddPart(Terraria.ModLoader.Mod,System.Int32,System.Int32,System.Int32,TerrariansConstructLib.ItemPartActionsBuilder,System.String)">
            <summary>
            Registers a part item for the material, <paramref name="materialType"/>, with the given rarity, <paramref name="rarity"/>
            </summary>
            <param name="mod">The mod instance to add the part to</param>
            <param name="materialType">The item ID</param>
            <param name="rarity">The item rarity</param>
            <param name="partID">The part ID</param>
            <param name="actions">The actions</param>
            <param name="tooltip">The tooltip for this part.  Can be modified via <seealso cref="M:TerrariansConstructLib.Items.ItemPart.SetTooltip(TerrariansConstructLib.Materials.Material,System.Int32,System.String)"/></param>
        </member>
        <member name="P:TerrariansConstructLib.Items.BaseTCItem.VisualsFolderPath">
            <summary>
            The location of the folder for this item's visuals (item part pieces used for constructing the texture) <br/>
            Example: <c>"TerrariansConstruct/Assets/Visuals/Sword"</c>
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeSetStaticDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.SetStaticDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeSetDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.SetDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.Clone(TerrariansConstructLib.Items.BaseTCItem,TerrariansConstructLib.Items.BaseTCItem)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.Clone(Terraria.Item)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyWeaponDamage(Terraria.Player,Terraria.ModLoader.StatModifier@,System.Single@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponDamage(Terraria.Player,Terraria.ModLoader.StatModifier@,System.Single@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyWeaponKnockback(Terraria.Player,Terraria.ModLoader.StatModifier@,System.Single@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponKnockback(Terraria.Player,Terraria.ModLoader.StatModifier@,System.Single@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyWeaponCrit(Terraria.Player,System.Int32@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponCrit(Terraria.Player,System.Int32@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeHoldItem(Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.HoldItem(Terraria.Player)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeUseItem(Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.UseItem(Terraria.Player)"/>
        </member>
        <member name="F:TerrariansConstructLib.Items.ItemPart.material">
            <summary>
            The material used to create this item part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.Items.ItemPart.partID">
            <summary>
            The part type associated with this item part
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPartItem">
            <summary>
            Represents an instance of an item part item
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.Items.ItemPartItem.part">
            <summary>
            The information for the item part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.Materials.Material.type">
            <summary>
            The ID of the item used as the material
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.Materials.Material.rarity">
            <summary>
            The rarity of the material
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeSetStaticDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SetStaticDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeSetDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SetDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeOnHitNPC(Terraria.NPC,System.Int32,System.Single,System.Boolean)">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.OnHitNPC(Terraria.NPC,System.Int32,System.Single,System.Boolean)"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeOnHitPlayer(Terraria.Player,System.Int32,System.Boolean)">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.OnHitPlayer(Terraria.Player,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeAI">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.AI"/>
        </member>
        <member name="T:TerrariansConstructLib.Registry.PartActions">
            <summary>
            A collection of action builders
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Utility.DropItem(Terraria.DataStructures.IEntitySource,Terraria.Item,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Spawns a shallow copy of an item in the world
            </summary>
            <param name="source">The entity source</param>
            <param name="item">The item instance</param>
            <param name="rectangle">The area where the item will spawn</param>
        </member>
    </members>
</doc>
