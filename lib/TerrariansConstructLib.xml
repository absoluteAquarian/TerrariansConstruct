<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TerrariansConstructLib</name>
    </assembly>
    <members>
        <member name="T:TerrariansConstructLib.API.CachedItemTexturesDictionary">
            <summary>
            A collection of textures indexed by registered item type and item parts
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.MaterialDefinition.Material">
            <summary>
            Return the material for the definition here.  A return value of <see langword="null"/> indicates that the material is unloaded
            </summary>
            <returns></returns>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.MaterialDefinition.MaterialWorth">
            <summary>
            How many items of this material definition's material item must be used to count as one "unit" for creating parts.
            Defaults to 1
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.MaterialDefinition.Trait">
            <summary>
            Return the ability trait for the definition here.  A return value of <see langword="null"/> indicates that the ability trait is unloaded
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.MaterialDefinition.ValidParts">
            <summary>
            A collection of the valid part definitions that this material can be used with.
            Defaults to no part definitions
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.API.Definitions.MaterialDefinition.GetTrait``1">
            <summary>
            Gets a clone of a registered BaseTrait's instance, or <see langword="null"/> if it does not exist
            </summary>
            <typeparam name="T">The trait type</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Definitions.MaterialDefinition.GetMaterialStats">
            <summary>
            Return the part stats for the material here.
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.PartDefinition.StatType">
            <summary>
            What stat classification this part uses
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.PartDefinition.ToolType">
            <summary>
            What tool classification this part falls under
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.PartDefinition.MaterialCost">
            <summary>
            The required number of material items needed to make this part, times two.
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.PartDefinition.HasWoodMold">
            <summary>
            Whether this part can be created via a wooden part mold.
            Defaults to true.
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.PartDefinition.RelativeAssetFolder">
            <summary>
            The relative path in any mod for this part definition's sprites.
            Defaults to <c>"Assets/Parts/"+Name</c>
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.PartDefinition.DisplayName">
            <summary>
            The publicly-visible name for this part definition.
            Defaults to <c>Name</c>, but with the Proper Words separated by spaces (e.g. "ToolRod" becomes "Tool Rod")
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.TCItemDefinition.ItemType">
            <summary>
            The item ID of the <see cref="T:TerrariansConstructLib.Items.BaseTCItem"/> item that this item definition is tied to
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.TCItemDefinition.RelativeVisualsFolder">
            <summary>
            The relative path in any mod for this item definition's part and modifier sprites.
            Defaults to <c>"Assets/Visuals/"+Name</c>
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.TCItemDefinition.UseSpeedMultiplier">
            <summary>
            The use speed multiplier applied to this item definition's item after calculating the stats from its parts' materials.
            Defaults to 1f
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.TCItemDefinition.AmmoConsumedPerShot">
            <summary>
            If this item definition's item uses ammo, this property indicates how much ammo it consumes per shot.
            Defaults to 1
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.API.Definitions.TCItemDefinition.HitsPerToolSwing">
            <summary>
            If this item definition's item is a tool, this property indicates how many tile "hits" it performs per swing.
            Defaults to 2
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.API.Definitions.TCItemDefinition.GetForgeSlotConfiguration">
            <summary>
            Return a collection of <see cref="T:TerrariansConstructLib.API.UI.ForgeUISlotConfiguration"/> values for this item definition here.<br/>
            A <see cref="T:TerrariansConstructLib.API.UI.ForgeUISlotConfiguration"/> value contains context for its item slot in the Forge UI
            </summary>
            <returns></returns>
        </member>
        <member name="M:TerrariansConstructLib.API.Extensions.GetSimplifiedGenericTypeName(System.Type)">
            <summary>
            Returns a string representing how you'd type a Type in C#, e.g. <c>Asset&lt;Texture2D&gt;</c>
            </summary>
            <param name="type">The type instance</param>
        </member>
        <member name="T:TerrariansConstructLib.API.Numbers.Roman">
            <summary>
            A helper class for converting positive, non-zero integers into their Roman number equivalents, using various formats<br/>
            Only numbers &gt; 0 and &lt;= 3999 are supported
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Numbers.RomanFormat.SubtractiveConventional">
            <summary>
            Subtractive format.  IX = 9, XLIX = 49, CMXCIX = 999
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Numbers.RomanFormat.SubtractiveNonConventional">
            <summary>
            Subtractive format.  IX = 9, IL = 49, IM = 999
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Numbers.RomanFormat.Additive">
            <summary>
            Additive format.  XVIIII = 9, XXXXVIIII = 49, DCCCCXXXXVIIII = 999
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`1">
            <summary>
            Reflection helper for accessing <typeparamref name="T"/> fields with an unspecified type
            </summary>
            <typeparam name="T">The declaring type</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.InvokeGetterFunction(System.String,`0)">
            <summary>
            Creates the getter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/> if necessary, then invokes it
            </summary>
            <param name="field">The name of the field</param>
            <param name="instance">The instance.  If the field is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <returns>The boxed value of the field</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.InvokeSetterFunction(System.String,`0,System.Object)">
            <summary>
            Creates the setter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/> if necessary, then invokes it
            </summary>
            <param name="field">The name of the field</param>
            <param name="instance">The instance.  If the field is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="obj">The boxed value to set the field to</param>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.CreateGetAccessor(System.String,System.String@)">
            <summary>
            Creates the getter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/>
            </summary>
            <param name="field">The name of the field</param>
            <param name="name">The key used to access the getter delegate</param>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.CreateSetAccessor(System.String,System.String@)">
            <summary>
            Creates the setter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/>
            </summary>
            <param name="field">The name of the field</param>
            <param name="name">The key used to access the setter delegate</param>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage">
            <summary>
            A wrapper class for easily using delegates created by <seealso cref="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`1"/>
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.field">
            <summary>
            The name of the field being accessed
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.#ctor(System.String)">
            <summary>
            Constructs a getter and setter delegate for the field <paramref name="field"/> in <typeparamref name="T"/>
            </summary>
            <param name="field">The name of the field</param>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.GetValue(`0)">
            <summary>
            Calls the generated getter function for the package's field
            </summary>
            <param name="instance">The instance.  If the field is <see langword="static" />, pass <see langword="null" /> for this parameter.</param>
            <returns>The boxed value for the field</returns>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.SetValue(`0,System.Object)">
            <summary>
            Calls the generated setter function for the package's field
            </summary>
            <param name="instance">The instance.  If the field is <see langword="static" />, pass <see langword="null" /> for this parameter.</param>
            <param name="value">The value to set the field to</param>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`1">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and no parameters
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`1.InvokeMethod(System.String,`0)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`1.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperReturn`2">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and no parameters
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperReturn`2.InvokeMethod(System.String,`0)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperReturn`2.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`2">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and a <typeparamref name="TArg"/> argument
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`2.InvokeMethod(System.String,`0,`1)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`2.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`3">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and a <typeparamref name="TArg"/> argument
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`3.InvokeMethod(System.String,`0,`1)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`3.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`3">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`3.InvokeMethod(System.String,`0,`1,`2)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`3.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`4">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`4.InvokeMethod(System.String,`0,`1,`2)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`4.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`4">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>, <typeparamref name="TArg3"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
            <typeparam name="TArg3">The type of the third argument</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`4.InvokeMethod(System.String,`0,`1,`2,`3)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <param name="arg3">The third argument</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`4.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`5">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>, <typeparamref name="TArg3"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
            <typeparam name="TArg3">The type of the third argument</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`5.InvokeMethod(System.String,`0,`1,`2,`3)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <param name="arg3">The third argument</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`5.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Stats.ExtraPartStats">
            <summary>
            An object representing any additional stats for an item part (e.g. Tool Binding)<br/>
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.API.Stats.ExtraPartStats.With(System.String,Terraria.ModLoader.StatModifier)">
            <summary>
            Sets the stat with the given identifier.  Calling this method more than once for the same identifier will throw an exception
            </summary>
            <param name="identifier">The name of the stat</param>
            <param name="stat">The stat value</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Stats.ExtraPartStats.With(TerrariansConstructLib.API.Stats.ExtraPartStats)">
            <summary>
            Combines this object's stats with another object's stats<br/>
            If <paramref name="other"/> has a modifier with the same identifier, the two stats are combined
            </summary>
            <param name="other">The other <see cref="T:TerrariansConstructLib.API.Stats.ExtraPartStats"/> object</param>
            <returns>A new <see cref="T:TerrariansConstructLib.API.Stats.ExtraPartStats"/> instance containing the stats of both</returns>
        </member>
        <member name="M:TerrariansConstructLib.API.Stats.ExtraPartStats.Get(System.String,System.Nullable{Terraria.ModLoader.StatModifier})">
            <summary>
            Gets the stat with the given identifier
            </summary>
            <param name="identifier">The name of the stat</param>
            <param name="defaultValueIfMissing">The default value that should be returned if the stat isn't present</param>
            <returns>The value of the stat if it's defined or <paramref name="defaultValueIfMissing"/> if it's not <see langword="null"/>, <see cref="F:Terraria.ModLoader.StatModifier.Default"/> otherwise</returns>
        </member>
        <member name="T:TerrariansConstructLib.API.Stats.HandlePartStats">
            <summary>
            An object representing the handle stats for an item part (e.g. Tool Rod)
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HandlePartStats.miningSpeed">
            <summary>
            The modifier for the mining use speed
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HandlePartStats.attackSpeed">
            <summary>
            The modifier for the attack use speed
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HandlePartStats.attackDamage">
            <summary>
            The modifier for the attack damage.  The <seealso cref="P:Terraria.ModLoader.StatModifier.Additive"/> property is considered a flat increase, whereas the <seealso cref="P:Terraria.ModLoader.StatModifier.Multiplicative"/> is treated as normal.
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HandlePartStats.attackKnockback">
            <summary>
            The modifier for the attack knocckback.  The <seealso cref="P:Terraria.ModLoader.StatModifier.Additive"/> property is considered a flat increase, whereas the <seealso cref="P:Terraria.ModLoader.StatModifier.Multiplicative"/> is treated as normal.
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HandlePartStats.durability">
            <summary>
            The modifier for the item's durability.  The <seealso cref="P:Terraria.ModLoader.StatModifier.Additive"/> property is considered a flat increase, whereas the <seealso cref="P:Terraria.ModLoader.StatModifier.Multiplicative"/> is treated as normal.
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.API.Stats.HeadPartStats">
            <summary>
            An object representing the head stats for an item part (e.g. Sword Blade or Pickaxe Head)
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.damage">
            <summary>
            The damage stat for the part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.knockback">
            <summary>
            The knockback stat for the part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.crit">
            <summary>
            The crit stat for the part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.useSpeed">
            <summary>
            The use speed stat for the part, measured in ticks per use
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.pickPower">
            <summary>
            The pickaxe power for the part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.axePower">
            <summary>
            The axe power for the part, multiplied by 5
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.hammerPower">
            <summary>
            The hammer power for the part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.durability">
            <summary>
            The durability for the part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.toolRange">
            <summary>
            The tool range modifier
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.API.Stats.StatType">
            <summary>
            Which type of stats an item part ID should use
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.API.Stats.ToolType">
            <summary>
            A classification for <see cref="F:TerrariansConstructLib.API.Stats.StatType.Head"/> parts
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetKnownMaterials">
            <summary>
            Gets an enumeration of <seealso cref="T:TerrariansConstructLib.Materials.Material"/> instances that were used to create item parts
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetMaterialTooltip(TerrariansConstructLib.Materials.Material)">
            <summary>
            Gets the global tooltip of an <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/>
            </summary>
            <param name="material">The material</param>
            <returns>The global tooltip</returns>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.MaterialType(TerrariansConstructLib.Materials.Material)">
            <summary>
            Attempts to find the corresponding <see cref="T:TerrariansConstructLib.API.Definitions.MaterialDefinition"/> ID for the input <see cref="T:TerrariansConstructLib.Materials.Material"/>, <paramref name="material"/>
            </summary>
            <param name="material">The material instance</param>
            <returns>The <see cref="P:TerrariansConstructLib.API.Definitions.MaterialDefinition.Type"/> if successful, <c>-1</c> otherwise</returns>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemType(System.Int32)">
            <summary>
            Converts a registered Terrarians' Contruct item ID into its tModLoader item ID
            </summary>
            <param name="registeredItemID">The registered item ID</param>
            <returns>The tModLoader item ID</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemPart(TerrariansConstructLib.Materials.Material,System.Int32)">
            <summary>
            Gets an <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/> instance clone from a material and part ID
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <returns>The <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/> instance</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemPartItemType(TerrariansConstructLib.Materials.Material,System.Int32)">
            <summary>
            Gets an <seealso cref="T:TerrariansConstructLib.Items.ItemPartItem"/> item type from a material and part ID
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <returns>The <seealso cref="T:TerrariansConstructLib.Items.ItemPartItem"/> item type</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemPartItem(TerrariansConstructLib.Materials.Material,System.Int32)">
            <summary>
            Gets an <seealso cref="T:TerrariansConstructLib.Items.ItemPartItem"/> item instance (via <seealso cref="M:Terraria.ModLoader.ModContent.GetModItem(System.Int32)"/>) from a material and part ID
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <returns>The <seealso cref="T:TerrariansConstructLib.Items.ItemPartItem"/> item instance</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.TryFindItem(System.Int32[],System.Int32@)">
            <summary>
            Attempts to find a registered item whose valid part IDs are set to the same values as <paramref name="partIDs"/>
            </summary>
            <param name="partIDs">The part IDs to check</param>
            <param name="registeredItemID">A value &gt;= <c>0</c> and &lt; <seealso cref="P:TerrariansConstructLib.API.ItemDefinitionLoader.Count"/> if successful, <c>-1</c> otherwise</param>
            <returns><see langword="true"/> if the search was successful, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.FindItem(System.Int32[])">
            <summary>
            Attempts to find a registered item whose valid part IDs are set to the same values as <paramref name="partIDs"/>
            </summary>
            <param name="partIDs">The part IDs to check</param>
            <returns>A value &gt;= <c>0</c> and &lt; <seealso cref="P:TerrariansConstructLib.API.ItemDefinitionLoader.Count"/> if successful, <c>-1</c> otherwise</returns>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.pickaxe">
            <summary>
            <see langword="true"/> if a tile was destroyed by a pickaxe
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.axe">
            <summary>
            <see langword="true"/> if a tile was destroyed by an axe
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.hammer">
            <summary>
            <see langword="true"/> if a tile was destroyed by a hammer
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.hammerWall">
            <summary>
            <see langword="true"/> if a wall was destroyed by a hammer
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.damage">
            <summary>
            The calculated damage used to destroy the tile
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.type">
            <summary>
            The ID of the tile that was destroyed
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.BaseTCItem">
            <summary>
            The base item class for any items that can be created by the Terrarians' Construct Forge UI
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Items.BaseTCItem.CurrentDurability">
            <summary>
            The current durability for the item
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.#ctor(System.Int32)">
            <summary>
            Creates an instance of a <see cref="T:TerrariansConstructLib.Items.BaseTCItem"/> using the data from a registered item ID
            </summary>
            <param name="registeredItemID">The registered item ID</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeIsLoadingEnabled(Terraria.ModLoader.Mod)">
            <summary>
            Allows you to safely request whether this item should be autoloaded
            </summary>
            <param name="mod">The mod adding this item</param>
            <returns><see langword="null"/> for the default behaviour (don't autoload item), <see langword="true"/> to let the item autoload or <see langword="false"/> to prevent the item from autoloading</returns>
        </member>
        <member name="P:TerrariansConstructLib.Items.BaseTCItem.RegisteredItemTypeName">
            <summary>
            The name for the item, used in <see cref="M:TerrariansConstructLib.Items.BaseTCItem.SetStaticDefaults"/><br/>
            Defaults to:  <c>ItemDefinitionLoader.Get(registeredItemID)!.Name</c>
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Items.BaseTCItem.TooltipText">
            <summary>
            The tooltip for the item
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeSetStaticDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.SetStaticDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.OnInitializedWithParts">
            <summary>
            Called after setting the parts on the item.  Use this hook to initialize fields in the item such as <seealso cref="F:Terraria.Item.pick"/>
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeSetDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.SetDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyTooltips(System.Collections.Generic.List{Terraria.ModLoader.TooltipLine})">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyTooltips(System.Collections.Generic.List{Terraria.ModLoader.TooltipLine})"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.Clone(Terraria.Item,TerrariansConstructLib.Items.BaseTCItem)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.Clone(Terraria.Item)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeCanConsumeAmmo(Terraria.Item,Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.CanConsumeAmmo(Terraria.Item,Terraria.Player)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeCanChooseAmmo(Terraria.Item,Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.CanChooseAmmo(Terraria.Item,Terraria.Player)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeCanBeChosenAsAmmo(Terraria.Item,Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.CanBeChosenAsAmmo(Terraria.Item,Terraria.Player)"/>
            <remarks>NOTE: Terrarians' Construct disables <see langword="null"/> returns since Item.ammo and Item.useAmmo are already checked</remarks>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyWeaponDamage(Terraria.Player,Terraria.ModLoader.StatModifier@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponDamage(Terraria.Player,Terraria.ModLoader.StatModifier@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyWeaponKnockback(Terraria.Player,Terraria.ModLoader.StatModifier@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponKnockback(Terraria.Player,Terraria.ModLoader.StatModifier@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyWeaponCrit(Terraria.Player,System.Single@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponCrit(Terraria.Player,System.Single@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeUseSpeedMultiplier(Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.UseSpeedMultiplier(Terraria.Player)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeHoldItem(Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.HoldItem(Terraria.Player)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeUpdateInventory(Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.UpdateInventory(Terraria.Player)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeUseItem(Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.UseItem(Terraria.Player)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeOnHitNPC(Terraria.Player,Terraria.NPC,System.Int32,System.Single,System.Boolean)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.OnHitNPC(Terraria.Player,Terraria.NPC,System.Int32,System.Single,System.Boolean)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeOnHitPvp(Terraria.Player,Terraria.Player,System.Int32,System.Boolean)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.OnHitPvp(Terraria.Player,Terraria.Player,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyHitNPC(Terraria.Player,Terraria.NPC,System.Int32@,System.Single@,System.Boolean@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyHitNPC(Terraria.Player,Terraria.NPC,System.Int32@,System.Single@,System.Boolean@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyHitPlayer(Terraria.Player,Terraria.Player,System.Int32@,System.Boolean@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyHitPvp(Terraria.Player,Terraria.Player,System.Int32@,System.Boolean@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeOnTileDestroyed(Terraria.Player,System.Int32,System.Int32,TerrariansConstructLib.DataStructures.TileDestructionContext)">
            <summary>
            Allows you to customize what happens when this tool destroys a tile.  This method is called clientside.
            </summary>
            <param name="player">The player doing the mining</param>
            <param name="x">The tile X-coordinate</param>
            <param name="y">The tile Y-coordinate</param>
            <param name="context">The context.  Contains information about what tool type was used to destroy the tile and how much damage was dealt to destroy the tile</param>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.GetBaseMiningSpeed">
            <summary>
            Gets the base mining speed for the item
            </summary>
            <returns>Zero if the item isn't a mining tool, the base mining speed otherwise</returns>
        </member>
        <member name="F:TerrariansConstructLib.Items.ItemPart.material">
            <summary>
            The material used to create this item part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.Items.ItemPart.partID">
            <summary>
            The part type associated with this item part
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPartItem">
            <summary>
            Represents an instance of an item part item
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.Items.ItemPartItem.part">
            <summary>
            The information for the item part
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.PartMold">
            <summary>
            Represents an instance of an item part mold
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Materials.Material.Type">
            <summary>
            The ID of the item used as the material
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Materials.Material.GetItemName">
            <summary>
            Gets the name for this material
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Materials.Material.AsItem">
            <summary>
            Gets an instance of the item this material references
            </summary>
            <returns>A new <see cref="T:Terraria.Item"/> instance, or <see langword="null"/> if this material is an <seealso cref="T:TerrariansConstructLib.Materials.UnloadedMaterial"/> or <seealso cref="T:TerrariansConstructLib.Materials.UnknownMaterial"/></returns>
        </member>
        <member name="T:TerrariansConstructLib.Materials.UnknownMaterial">
            <summary>
            Represents an unknown material
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Materials.UnloadedMaterial">
            <summary>
            Represents a material that used to be loaded, but no longer is
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Modifiers.BaseModifier">
            <summary>
            The base class for a modifier that can be applied to a Terrarians' Construct item
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Modifiers.BaseModifier.MaxTier">
            <summary>
            The highest tier that can be obtained from this modifier<br/>
            Making this property return <c>1</c> will prevent the roman numeral from appearing beside its name
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Modifiers.BaseModifier.VisualTexture">
            <summary>
            The relative path for the visual texture of this modifier<br/>
            Return <see langword="null"/> if there is no visual
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Modifiers.BaseModifier.VisualIsDisplayedAboveItem">
            <summary>
            Whether the visual texture of this modifier is drawn above the item's texture<br/>
            Defaults to <see langword="true"/>
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseModifier.GetUpgradeTarget">
            <summary>
            Return the next upgrade target for the current tier here, or -1 if the tier is at the maximum
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseModifier.CanAcceptItemsForUpgrade(TerrariansConstructLib.API.ItemData[],System.Int32@,System.Int32@)">
            <summary>
            Return whether the item types defined in <paramref name="items"/> were used to increase <paramref name="upgradeCurrent"/>
            </summary>
            <param name="items">The items that are in the Forge UI slots, starting with the topmost slot and moving clockwise</param>
            <param name="upgradeCurrent">The current progress toward the next tier.  Once <paramref name="upgradeCurrent"/> surpasses <paramref name="upgradeTarget"/>, the modifier is upgraded to the next tier</param>
            <param name="upgradeTarget">The target progress needed to upgrade the modifier to the next tier</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseModifier.RemoveItems(TerrariansConstructLib.API.ItemData[],System.Int32,System.Int32)">
            <summary>
            Removes the item of type, <paramref name="typeToRemove"/>, from <paramref name="items"/>
            </summary>
            <param name="items">The items</param>
            <param name="typeToRemove">The type to remove from the stacks</param>
            <param name="stackToRemove">How much of the item to remove</param>
            <returns>Whether <paramref name="stackToRemove"/> was removed completely</returns>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseModifier.ItemsOnlyContain(TerrariansConstructLib.API.ItemData[],System.Int32[])">
            <summary>
            Returns whether <paramref name="items"/> only contains item types found in <paramref name="validTypes"/><br/>
            Empty slots are considered "valid"
            </summary>
            <param name="items">The items</param>
            <param name="validTypes">The valid types</param>
        </member>
        <member name="T:TerrariansConstructLib.Modifiers.BaseTrait">
            <summary>
            The base class for a trait on a Terrarians' Construct item
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Modifiers.BaseTrait.Tier">
            <summary>
            Gets how many "instances" of this trait's material are present on the item it's assigned to<br/>
            This property is affected by <see cref="M:TerrariansConstructLib.Modifiers.BaseTrait.IsEquivalentForTier(System.Type,System.UInt32@)"/>
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Modifiers.BaseTrait.IsSingleton">
            <summary>
            Whether this ability is considered a singleton (only one instance exists on an item at any given moment)<br/>
            Defaults to <see langword="false"/>, which indicates that an instance is stored per item part
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Modifiers.BaseTrait.TooltipColor">
            <summary>
            The colour for the modifier's name when in a tooltip
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Modifiers.BaseTrait.LangKey">
            <summary>
            The lang key used when displaying the tooltip for the modifier
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.Clone">
            <summary>
            This hook is called when cloning instances of this ability
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.IsEquivalentForTier(System.Type,System.UInt32@)">
            <summary>
            Override this hook to determine when another <see cref="T:TerrariansConstructLib.Modifiers.BaseTrait"/> type can be considered equivalent when calculating tiers
            </summary>
            <param name="type">The type of the <see cref="T:TerrariansConstructLib.Modifiers.BaseTrait"/></param>
            <param name="tierWorth">The worth of the tier.  Defaults to <c>1</c></param>
            <returns><c>GetType().IsAssignableFrom(type)</c> by default</returns>
        </member>
        <member name="P:TerrariansConstructLib.Modifiers.BaseTrait.CounterIncrements">
            <summary>
            Whether the <see cref="F:TerrariansConstructLib.Modifiers.BaseTrait.Counter"/> automatically increments (<see langword="true"/>) or decrements (<see langword="false"/>)<br/>
            This property is ignored if <see cref="M:TerrariansConstructLib.Modifiers.BaseTrait.ShouldUpdateCounter(Terraria.Player)"/> returns <see langword="false"/><br/>
            This property defaults to <see langword="true"/>
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.ShouldUpdateCounter(Terraria.Player)">
            <summary>
            Whether <see cref="F:TerrariansConstructLib.Modifiers.BaseTrait.Counter"/> should be automatically modified by 1 per tick.<br/>
            If your ability's counter isn't time-based (say, an ability whose counter is increased more the faster you move), return <see langword="false"/> in this hook<br/>
            Defaults to <see langword="false"/>
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.GetExpectedCounterTarget(Terraria.Player)">
            <summary>
            Gets the expected target value that the counter will step toward
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.GetCounterValueOnTargetReached(Terraria.Player)">
            <summary>
            Gets the value used when resetting <see cref="F:TerrariansConstructLib.Modifiers.BaseTrait.Counter"/>
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnCounterTargetReached(Terraria.Player)">
            <summary>
            This hook runs when <see cref="F:TerrariansConstructLib.Modifiers.BaseTrait.Counter"/> reaches the value returned by <see cref="M:TerrariansConstructLib.Modifiers.BaseTrait.GetExpectedCounterTarget(Terraria.Player)"/><br/>
            If <see cref="P:TerrariansConstructLib.Modifiers.BaseTrait.CounterIncrements"/> is <see langword="true"/>, <see cref="F:TerrariansConstructLib.Modifiers.BaseTrait.Counter"/> must be greater than the aforementioned value, otherwise it must be less than the value.
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.CanResetCounter(Terraria.Player)">
            <summary>
            Whether <see cref="F:TerrariansConstructLib.Modifiers.BaseTrait.Counter"/> can be reset once it reaches the value returned by <see cref="M:TerrariansConstructLib.Modifiers.BaseTrait.GetExpectedCounterTarget(Terraria.Player)"/><br/>
            Return <see langword="false"/> to prevent <see cref="F:TerrariansConstructLib.Modifiers.BaseTrait.Counter"/> from resetting, which might be useful for abilities which are put in a "wait for activation" state.
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnHoldItem(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem)">
            <summary>
            This hook runs every game tick while the player is holding the item this ability is tied to
            </summary>
            <param name="player">The player</param>
            <param name="item">The item being held</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnUpdateInventory(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem)">
            <summary>
            This hook runs every game tick while the player has the item this ability is tied to in their inventory
            </summary>
            <param name="player">The player</param>
            <param name="item">The item instance</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnUpdate(Terraria.Player,System.Boolean)">
            <summary>
            Perform update tasks in this hook.  This hook is called in <see cref="M:Terraria.ModLoader.ModPlayer.PostUpdateMiscEffects"/>
            </summary>
            <param name="player">The player</param>
            <param name="counterWasReset">Whether <see cref="F:TerrariansConstructLib.Modifiers.BaseTrait.Counter"/> was reset in this game tick</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnAbilityHotkeyPressed(Terraria.Player)">
            <summary>
            This hook runs when the ability hotkey is pressed
            </summary>
            <param name="player">The player</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.UseSpeedMultiplier(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem,Terraria.ModLoader.StatModifier@)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Items.BaseTCItem.UseSpeedMultiplier(Terraria.Player)"/>
            </summary>
            <param name="player">The player</param>
            <param name="item">The item instance</param>
            <param name="multiplier">The multiplier</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.ModifyToolPower(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem,TerrariansConstructLib.DataStructures.TileDestructionContext,System.Int32@)">
            <summary>
            This hook runs before the mining tool, <paramref name="item"/>, hits a tile
            </summary>
            <param name="player">The player</param>
            <param name="item">The item doing the mining</param>
            <param name="context">The context.  Contains information about what tool type was used to hit the tile and the intended damage</param>
            <param name="power">The effective tool power</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnTileDestroyed(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem,System.Int32,System.Int32,TerrariansConstructLib.DataStructures.TileDestructionContext)">
            <summary>
            This hook runs after the player has destroyed a tile using a <see cref="T:TerrariansConstructLib.Items.BaseTCItem"/> item
            </summary>
            <param name="player">The player doing the mining</param>
            <param name="item">The item used to destroy the tile</param>
            <param name="x">The tile X-coordinate</param>
            <param name="y">The tile Y-coordinate</param>
            <param name="context">The context.  Contains information about what tool type was used to destroy the tile and how much damage was dealt to destroy the tile</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.CanLoseDurability(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem,TerrariansConstructLib.API.Sources.IDurabilityModificationSource)">
            <summary>
            Return false in this hook to prevent the <paramref name="item"/> from losing durability
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.ModifyHitNPC(Terraria.Player,Terraria.NPC,TerrariansConstructLib.Items.BaseTCItem,System.Int32@,System.Single@,System.Boolean@)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyHitNPC(Terraria.Player,Terraria.NPC,System.Int32@,System.Single@,System.Boolean@)"/>
            </summary>
            <param name="player">The player</param>
            <param name="target">The target</param>
            <param name="item">The item doing the hitting</param>
            <param name="damage">The damage</param>
            <param name="knockBack">The knockback</param>
            <param name="crit">If set to <see langword="true"/> [crit]</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.ModifyHitNPCWithProjectile(TerrariansConstructLib.Projectiles.BaseTCProjectile,Terraria.NPC,System.Int32@,System.Single@,System.Boolean@,System.Int32@)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyHitNPC(Terraria.Player,Terraria.NPC,System.Int32@,System.Single@,System.Boolean@)"/>
            </summary>
            <param name="projectile">The projectile doing the hitting</param>
            <param name="target">The target</param>
            <param name="damage">The damage</param>
            <param name="knockBack">The knockback</param>
            <param name="crit">If set to <see langword="true"/> [crit]</param>
            <param name="hitDirection">The hit direction.  -1 is to the left, 1 is to the right and 0 is neither</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.ModifyHitPlayer(Terraria.Player,Terraria.Player,TerrariansConstructLib.Items.BaseTCItem,System.Int32@,System.Boolean@)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyHitPvp(Terraria.Player,Terraria.Player,System.Int32@,System.Boolean@)"/>
            </summary>
            <param name="owner">The player</param>
            <param name="target">The target</param>
            <param name="item">The item that hit the target</param>
            <param name="damage">The damage</param>
            <param name="crit">If set to <see langword="true"/> [crit]</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.ModifyHitPlayerWithProjectile(TerrariansConstructLib.Projectiles.BaseTCProjectile,Terraria.Player,System.Int32@,System.Boolean@)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.ModifyHitPlayer(Terraria.Player,System.Int32@,System.Boolean@)"/>
            </summary>
            <param name="projectile">The projectile</param>
            <param name="target">The target</param>
            <param name="damage">The damage</param>
            <param name="crit">If set to <see langword="true"/> [crit]</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnHitNPC(Terraria.Player,Terraria.NPC,TerrariansConstructLib.Items.BaseTCItem,System.Int32,System.Single,System.Boolean)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Items.BaseTCItem.OnHitNPC(Terraria.Player,Terraria.NPC,System.Int32,System.Single,System.Boolean)"/>
            </summary>
            <param name="player">The player</param>
            <param name="target">The target</param>
            <param name="item">The item that hit the target</param>
            <param name="damage">The damage</param>
            <param name="knockBack">The knockback</param>
            <param name="crit">If set to <see langword="true"/> [crit]</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnHitPlayer(Terraria.Player,Terraria.Player,TerrariansConstructLib.Items.BaseTCItem,System.Int32,System.Boolean)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Items.BaseTCItem.OnHitPvp(Terraria.Player,Terraria.Player,System.Int32,System.Boolean)"/>
            </summary>
            <param name="owner">The player</param>
            <param name="target">The target</param>
            <param name="item">The item that hit the target</param>
            <param name="damage">The damage</param>
            <param name="crit">If set to <see langword="true"/> [crit]</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnHitPlayerWithProjectile(TerrariansConstructLib.Projectiles.BaseTCProjectile,Terraria.Player,System.Int32,System.Boolean)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.OnHitPlayer(Terraria.Player,System.Int32,System.Boolean)"/>
            </summary>
            <param name="projectile">The projectile</param>
            <param name="target">The target</param>
            <param name="damage">The damage</param>
            <param name="crit">If set to <see langword="true"/> [crit]</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnHitNPCWithProjectile(TerrariansConstructLib.Projectiles.BaseTCProjectile,Terraria.NPC,System.Int32,System.Single,System.Boolean)">
            <summary>
            This hook rusn in <see cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.OnHitNPC(Terraria.NPC,System.Int32,System.Single,System.Boolean)"/>
            </summary>
            <param name="projectile">The projectile</param>
            <param name="target">The target</param>
            <param name="damage">The damage</param>
            <param name="knockBack">The knockback</param>
            <param name="crit">If set to <see langword="true"/> [crit]</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnHitByNPC(Terraria.NPC,Terraria.Player,System.Int32,System.Boolean)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Players.ItemModifierPlayer.OnHitByNPC(Terraria.NPC,System.Int32,System.Boolean)"/>
            </summary>
            <param name="npc">The NPC doing the hitting</param>
            <param name="target">The target</param>
            <param name="damage">The damage</param>
            <param name="crit">If set to <see langword="true"/> [crit]</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnHitByNPCProjectile(Terraria.Projectile,Terraria.NPC,Terraria.Player,System.Int32,System.Boolean)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Players.ItemModifierPlayer.OnHitByProjectile(Terraria.Projectile,System.Int32,System.Boolean)"/>
            </summary>
            <param name="projectile">The projectile doing the hitting</param>
            <param name="npc">The npc</param>
            <param name="target">The target</param>
            <param name="damage">The damage</param>
            <param name="crit">If set to <see langword="true"/> [crit]</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.PreModifyDurability(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem,TerrariansConstructLib.API.Sources.IDurabilityModificationSource,System.Int32@)">
            <summary>
            This hook runs before durability is added to or subtracted from the <paramref name="item"/>
            </summary>
            <param name="player">The player</param>
            <param name="item">The item</param>
            <param name="source">The modification source</param>
            <param name="amount">The amount to modify the durability by.  If the value is &lt; 0, then the modification was a durability removal, otherwise it's a durability addition</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnProjectileSpawn(TerrariansConstructLib.Projectiles.BaseTCProjectile,Terraria.DataStructures.IEntitySource)">
            <summary>
            This hook runs when a <see cref="T:TerrariansConstructLib.Projectiles.BaseTCProjectile"/> projectile is spawned which has a part with this ability
            </summary>
            <param name="projectile">The spawned projectile</param>
            <param name="source">The spawn source</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.ModifyWeaponDamage(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem,Terraria.ModLoader.StatModifier@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponDamage(Terraria.Player,Terraria.ModLoader.StatModifier@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.ModifyWeaponKnockback(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem,Terraria.ModLoader.StatModifier@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponKnockback(Terraria.Player,Terraria.ModLoader.StatModifier@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.ModifyWeaponCrit(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem,System.Single@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponCrit(Terraria.Player,System.Single@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.UseItem(Terraria.Player,TerrariansConstructLib.Items.BaseTCItem)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Items.BaseTCItem.UseItem(Terraria.Player)"/>
            </summary>
            <param name="player">The player</param>
            <param name="item">The item</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.CanConsumeAmmo(TerrariansConstructLib.Items.BaseTCItem,TerrariansConstructLib.Items.BaseTCItem,Terraria.Player)">
            <summary>
            This hook runs in <see cref="M:TerrariansConstructLib.Items.BaseTCItem.CanConsumeAmmo(Terraria.Item,Terraria.Player)"/>
            </summary>
            <param name="weapon">The weapon</param>
            <param name="ammo">The ammo potentially being consumed</param>
            <param name="player">The player</param>
            <returns>Whether the ammo can be consumed</returns>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.OnPickup(Terraria.Item,Terraria.Player)">
            <inheritdoc cref="M:Terraria.ModLoader.GlobalItem.OnPickup(Terraria.Item,Terraria.Player)"/>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.SaveData(Terraria.ModLoader.IO.TagCompound)">
            <summary>
            Allows you to save custom data for this ability.<br/>
            <br/>
            <b>NOTE:</b> The provided tag is always empty by default, and is provided as an argument only for the sake of convenience and optimization.<br/>
            <b>NOTE:</b> Try to only save data that isn't default values.
            </summary>
            <param name="tag">The TagCompound to save data into. Note that this is always empty by default, and is provided as an argument only for the sake of convenience and optimization.</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.BaseTrait.LoadData(Terraria.ModLoader.IO.TagCompound)">
            <summary>
            Allows you to load custom data that you have saved for this item.<br/>
            <b>Try to write defensive loading code that won't crash if something's missing.</b>
            </summary>
            <param name="tag">The TagCompound to load data from.</param>
        </member>
        <member name="M:TerrariansConstructLib.Modifiers.ModifierCollection.AddModifier(TerrariansConstructLib.Modifiers.BaseModifier)">
            <summary>
            Adds a modifier to the collection
            </summary>
            <param name="modifier">The modifier</param>
            <returns>The modifier instance</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.NetHelper.HandlePacket(System.IO.BinaryReader,System.Int32)">
            <inheritdoc cref="M:Terraria.ModLoader.Mod.HandlePacket(System.IO.BinaryReader,System.Int32)"/>
        </member>
        <member name="T:TerrariansConstructLib.Projectiles.BaseTCProjectile">
            <summary>
            The base projectile class for any projectiles fired from Terrarians' Construct weapons
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeIsLoadingEnabled(Terraria.ModLoader.Mod)">
            <summary>
            Allows you to safely request whether this projectile should be autoloaded
            </summary>
            <param name="mod">The mod adding this projectile</param>
            <returns><see langword="null"/> for the default behaviour (don't autoload projectile), <see langword="true"/> to let the projectile autoload or <see langword="false"/> to prevent the projectile from autoloading</returns>
        </member>
        <member name="P:TerrariansConstructLib.Projectiles.BaseTCProjectile.ProjectileTypeName">
            <summary>
            The name for the projectile, used in <see cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SetStaticDefaults"/><br/>
            Defaults to: <c>"Projectile"</c>
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeSetStaticDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SetStaticDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeModifyHitNPC(Terraria.NPC,System.Int32@,System.Single@,System.Boolean@,System.Int32@)">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.ModifyHitNPC(Terraria.NPC,System.Int32@,System.Single@,System.Boolean@,System.Int32@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeOnHitNPC(Terraria.NPC,System.Int32,System.Single,System.Boolean)">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.OnHitNPC(Terraria.NPC,System.Int32,System.Single,System.Boolean)"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeOnHitPlayer(Terraria.Player,System.Int32,System.Boolean)">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.OnHitPlayer(Terraria.Player,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeAI">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.AI"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafePreDraw(Microsoft.Xna.Framework.Color@)">
            <summary>
            This hook runs immediately before the projectile is drawn
            </summary>
            <param name="lightColor">The color of the light at the projectile's center</param>
        </member>
        <member name="T:TerrariansConstructLib.Stats.ItemStat">
            <summary>
            An object for displaying stat modifiers in item tooltips
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Stats.ItemStatCollection">
            <summary>
            A collection of stat modifiers used for formatting tooltips
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Stats.ItemStatCollection.AddStats(System.String,System.String)">
            <summary>
            Adds the stat information to the internal dictionary
            </summary>
            <param name="baseName">The base name for the stat modifier keys</param>
            <param name="baseLangKey">The base lang key used for the stat modifier keys</param>
            <remarks>The two entries added are intended to be used with <see cref="M:TerrariansConstructLib.Stats.ItemStatCollection.Format(System.String,Terraria.ModLoader.StatModifier)"/></remarks>
        </member>
        <member name="M:TerrariansConstructLib.Stats.ItemStatCollection.AddStat(System.String,System.String)">
            <summary>
            Adds the stat information to the internal dictionary
            </summary>
            <param name="name">The name for the stat modifier key</param>
            <param name="langKey">The lang key used for the stat modifier key</param>
            <remarks>The entry added is intended to be used with <see cref="M:TerrariansConstructLib.Stats.ItemStatCollection.Format(System.String,System.Single)"/></remarks>
        </member>
        <member name="M:TerrariansConstructLib.Utility.DropItem(Terraria.DataStructures.IEntitySource,Terraria.Item,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Spawns a shallow copy of an item in the world
            </summary>
            <param name="source">The entity source</param>
            <param name="item">The item instance</param>
            <param name="rectangle">The area where the item will spawn</param>
        </member>
        <member name="M:TerrariansConstructLib.Utility.ForceLoadModHJsonLocalization(Terraria.ModLoader.Mod)">
            <summary>
            Force's the localization for the given mod, <paramref name="mod"/>, to be loaded for use with <seealso cref="T:Terraria.Localization.Language"/>
            </summary>
            <param name="mod">The mod instance</param>
        </member>
    </members>
</doc>
