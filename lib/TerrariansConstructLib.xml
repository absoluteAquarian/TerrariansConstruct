<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TerrariansConstructLib</name>
    </assembly>
    <members>
        <member name="T:TerrariansConstructLib.API.CachedItemTexturesDictionary">
            <summary>
            A collection of textures indexed by registered item type and item parts
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.API.Extensions.GetSimplifiedGenericTypeName(System.Type)">
            <summary>
            Returns a string representing how you'd type a Type in C#, e.g. <c>Asset&lt;Texture2D&gt;</c>
            </summary>
            <param name="type">The type instance</param>
        </member>
        <member name="T:TerrariansConstructLib.API.ModifierText">
            <summary>
            Represents a line of text for a part's modifier
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`1">
            <summary>
            Reflection helper for accessing <typeparamref name="T"/> fields with an unspecified type
            </summary>
            <typeparam name="T">The declaring type</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.InvokeGetterFunction(System.String,`0)">
            <summary>
            Creates the getter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/> if necessary, then invokes it
            </summary>
            <param name="field">The name of the field</param>
            <param name="instance">The instance.  If the field is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <returns>The boxed value of the field</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.InvokeSetterFunction(System.String,`0,System.Object)">
            <summary>
            Creates the setter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/> if necessary, then invokes it
            </summary>
            <param name="field">The name of the field</param>
            <param name="instance">The instance.  If the field is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="obj">The boxed value to set the field to</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.CreateGetAccessor(System.String,System.String@)">
            <summary>
            Creates the getter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/>
            </summary>
            <param name="field">The name of the field</param>
            <param name="name">The key used to access the getter delegate</param>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.CreateSetAccessor(System.String,System.String@)">
            <summary>
            Creates the setter delegate for the field, <paramref name="field"/>, in <typeparamref name="T"/>
            </summary>
            <param name="field">The name of the field</param>
            <param name="name">The key used to access the setter delegate</param>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage">
            <summary>
            A wrapper class for easily using delegates created by <seealso cref="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`1"/>
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.field">
            <summary>
            The name of the field being accessed
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.#ctor(System.String)">
            <summary>
            Constructs a getter and setter delegate for the field <paramref name="field"/> in <typeparamref name="T"/>
            </summary>
            <param name="field">The name of the field</param>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.GetValue(`0)">
            <summary>
            Calls the generated getter function for the package's field
            </summary>
            <param name="instance">The instance.  If the field is <see langword="static" />, pass <see langword="null" /> for this parameter.</param>
            <returns>The boxed value for the field</returns>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`1.ValueMutationMethodPackage.SetValue(`0,System.Object)">
            <summary>
            Calls the generated setter function for the package's field
            </summary>
            <param name="instance">The instance.  If the field is <see langword="static" />, pass <see langword="null" /> for this parameter.</param>
            <param name="value">The value to set the field to</param>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`1">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and no parameters
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`1.InvokeMethod(System.String,`0)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`1.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperReturn`2">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and no parameters
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperReturn`2.InvokeMethod(System.String,`0)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperReturn`2.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`2">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and a <typeparamref name="TArg"/> argument
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`2.InvokeMethod(System.String,`0,`1)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`2.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`3">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and a <typeparamref name="TArg"/> argument
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`3.InvokeMethod(System.String,`0,`1)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`3.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`3">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`3.InvokeMethod(System.String,`0,`1,`2)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`3.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`4">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`4.InvokeMethod(System.String,`0,`1,`2)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`4.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`4">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <see langword="void"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>, <typeparamref name="TArg3"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
            <typeparam name="TArg3">The type of the third argument</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`4.InvokeMethod(System.String,`0,`1,`2,`3)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <param name="arg3">The third argument</param>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelperVoid`4.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Reflection.ReflectionHelper`5">
            <summary>
            Reflection helper for <typeparamref name="TType"/> methods with a <typeparamref name="TReturn"/> return signature and (<typeparamref name="TArg"/>, <typeparamref name="TArg2"/>, <typeparamref name="TArg3"/>) arguments
            </summary>
            <typeparam name="TType">The declaring type</typeparam>
            <typeparam name="TArg">The type of the first argument</typeparam>
            <typeparam name="TArg2">The type of the second argument</typeparam>
            <typeparam name="TArg3">The type of the third argument</typeparam>
            <typeparam name="TReturn">The return type of the method</typeparam>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`5.InvokeMethod(System.String,`0,`1,`2,`3)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/> if necessary, then invokes it
            </summary>
            <param name="method">The name of the method</param>
            <param name="instance">The instance.  If the method is <see langword="static"/>, pass <see langword="null"/> for this parameter.</param>
            <param name="arg">The first argument</param>
            <param name="arg2">The second argument</param>
            <param name="arg3">The third argument</param>
            <returns>The return value for the method</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:TerrariansConstructLib.API.Reflection.ReflectionHelper`5.CreateMethod(System.String)">
            <summary>
            Creates a delegate for the method, <paramref name="method"/>, in <typeparamref name="TType"/>
            </summary>
            <param name="method">The name of the method</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TerrariansConstructLib.API.Stats.ExtraPartStats">
            <summary>
            An object representing any additional stats for an item part (e.g. Tool Binding)<br/>
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.API.Stats.ExtraPartStats.With(System.String,Terraria.ModLoader.StatModifier)">
            <summary>
            Sets the stat with the given identifier.  Calling this method more than once for the same identifier will throw an exception
            </summary>
            <param name="identifier">The name of the stat</param>
            <param name="stat">The stat value</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TerrariansConstructLib.API.Stats.ExtraPartStats.With(TerrariansConstructLib.API.Stats.ExtraPartStats)">
            <summary>
            Combines this object's stats with another object's stats<br/>
            If <paramref name="other"/> has a modifier with the same identifier, the two stats are combined
            </summary>
            <param name="other">The other <see cref="T:TerrariansConstructLib.API.Stats.ExtraPartStats"/> object</param>
            <returns>A new <see cref="T:TerrariansConstructLib.API.Stats.ExtraPartStats"/> instance containing the stats of both</returns>
        </member>
        <member name="M:TerrariansConstructLib.API.Stats.ExtraPartStats.Get(System.String)">
            <summary>
            Gets the stat with the given identifier
            </summary>
            <param name="identifier">The name of the stat</param>
            <returns>The value of the stat if it's defined, <seealso cref="F:Terraria.ModLoader.StatModifier.One"/> otherwise</returns>
        </member>
        <member name="T:TerrariansConstructLib.API.Stats.HandlePartStats">
            <summary>
            An object representing the handle stats for an item part (e.g. Tool Rod)
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HandlePartStats.miningSpeed">
            <summary>
            The modifier for the mining use speed
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HandlePartStats.attackSpeed">
            <summary>
            The modifier for the attack use speed
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HandlePartStats.attackDamage">
            <summary>
            The modifier for the attack damage.  The <seealso cref="P:Terraria.ModLoader.StatModifier.Additive"/> property is considered a flat increase, whereas the <seealso cref="P:Terraria.ModLoader.StatModifier.Multiplicative"/> is treated as normal.
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HandlePartStats.attackKnockback">
            <summary>
            The modifier for the attack knocckback.  The <seealso cref="P:Terraria.ModLoader.StatModifier.Additive"/> property is considered a flat increase, whereas the <seealso cref="P:Terraria.ModLoader.StatModifier.Multiplicative"/> is treated as normal.
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HandlePartStats.durability">
            <summary>
            The modifier for the item's durability.  The <seealso cref="P:Terraria.ModLoader.StatModifier.Additive"/> property is considered a flat increase, whereas the <seealso cref="P:Terraria.ModLoader.StatModifier.Multiplicative"/> is treated as normal.
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.API.Stats.HeadPartStats">
            <summary>
            An object representing the head stats for an item part (e.g. Sword Blade or Pickaxe Head)
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.damage">
            <summary>
            The damage stat for the part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.knockback">
            <summary>
            The knockback stat for the part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.crit">
            <summary>
            The crit stat for the part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.useSpeed">
            <summary>
            The use speed stat for the part, measured in ticks per use
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.toolPower">
            <summary>
            The tool power for the part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.API.Stats.HeadPartStats.durability">
            <summary>
            The durability for the part
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.API.Stats.StatType">
            <summary>
            Which type of stats an item part ID should use
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.RegisterPart(Terraria.ModLoader.Mod,System.String,System.String,System.Int32,System.Boolean,System.String,TerrariansConstructLib.API.Stats.StatType)">
            <summary>
            Registers a part definition
            </summary>
            <param name="mod">The mod that the part belongs to</param>
            <param name="internalName">The internal name of the part</param>
            <param name="name">The name of the part</param>
            <param name="materialCost">How much material is required to craft this part, multiplied by 2</param>
            <param name="hasSimpleMold">Whether the part can be made with the simple mold</param>
            <param name="assetFolderPath">The path to the folder containing the part's textures</param>
            <param name="type">Which type of stats the part should use</param>
            <returns>The ID of the registered part</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.RegisterAmmo(Terraria.ModLoader.Mod,System.String,System.Int32,System.String)">
            <summary>
            Registers a name and <seealso cref="T:Terraria.ID.ItemID"/>/<seealso cref="T:Terraria.ID.AmmoID"/> for the next constructed ammo type to be assigned an ID
            </summary>
            <param name="mod">The mod that the ammo belongs to</param>
            <param name="name">The name of the constructed ammo type</param>
            <param name="ammoID">The <seealso cref="T:Terraria.ID.ItemID"/>/<seealso cref="T:Terraria.ID.AmmoID"/> for the constructed ammo ID</param>
            <param name="projectileInternalName">The projectile that this constructed ammo will shoot.  Use the string you'd use to access the projectile via <seealso cref="M:Terraria.ModLoader.Mod.Find``1(System.String)"/></param>
            <returns>The ID of the registered constructed ammo type</returns>
            <remarks>Note: The returned ID does not correlate with <seealso cref="T:Terraria.ID.AmmoID"/> nor <seealso cref="T:Terraria.ID.ItemID"/></remarks>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.RegisterItem(Terraria.ModLoader.Mod,System.String,System.String,System.String,System.String,System.Int32[])">
            <summary>
            Registers a name and valid <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/> IDs for an item
            </summary>
            <param name="mod">The mod that the weapon belongs to</param>
            <param name="internalName">The internal name of the weapon</param>
            <param name="name">The default item type name used by <seealso cref="P:TerrariansConstructLib.Items.BaseTCItem.RegisteredItemTypeName"/></param>
            <param name="itemInternalName">The item type that this registered item ID will be applied to.  Use the string you'd use to access the item via <seealso cref="M:Terraria.ModLoader.Mod.Find``1(System.String)"/></param>
            <param name="partVisualsFolder">The folder where the item's part visuals is located, relative to the mod they're from</param>
            <param name="validPartIDs">The array of parts that comprise the weapon</param>
            <returns>The ID of the registered item</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.RegisterMaterialStats(TerrariansConstructLib.Materials.Material,System.Int32,TerrariansConstructLib.API.Stats.IPartStats[])">
            <summary>
            Registers item part stats for a certain material
            </summary>
            <param name="material">The material for the item part stats</param>
            <param name="worth">How much material is needed to create one Shard part</param>
            <param name="stats">The stats for the material</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetKnownMaterials">
            <summary>
            Gets an enumeration of <seealso cref="T:TerrariansConstructLib.Materials.Material"/> instances that were used to create item parts
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.SetPartAsAxeToolPart(System.Int32,System.Boolean)">
            <summary>
            Flags or clears a part ID as being an axe part
            </summary>
            <param name="partID">The part ID</param>
            <param name="isAxe">Whether the part is an axe part</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetPartName(System.Int32)">
            <summary>
            Gets the name of a registered part
            </summary>
            <param name="id">The ID of the part to get</param>
            <returns>The name of the registered part, or throws an exception if a part of type <paramref name="id"/> does not exist</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetPartInternalName(System.Int32)">
            <summary>
            Gets the internal name of a registered part
            </summary>
            <param name="id">The ID of the part to get</param>
            <returns>The internal name of the registered part, or throws an exception if a part of type <paramref name="id"/> does not exist</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetPartTooltip(TerrariansConstructLib.Materials.Material,System.Int32)">
            <summary>
            Gets the global tooltip of an <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/>
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <returns>The global tooltip</returns>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.SetGlobalPartTooltip(TerrariansConstructLib.Materials.Material,System.Int32,System.String)">
            <summary>
            Sets the global tooltip of an <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/>
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <param name="tooltip">The new tooltip</param>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetPartModifierText(TerrariansConstructLib.Materials.Material,System.Int32)">
            <summary>
            Gets the global modifier text of an <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/>
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <returns>The global modifier text</returns>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetPartModifierStatOrDefault(TerrariansConstructLib.Materials.Material,System.Int32,Terraria.ModLoader.StatModifier)">
            <summary>
            Gets the global modifier text's stat of an <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/>, or a default value if there is none
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <param name="defaultValue">The value to use if the part does not have a global modifier text instance</param>
            <returns>The global modifier stat, or the default value if it's not defined</returns>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.SetGlobalPartModifierText(TerrariansConstructLib.Materials.Material,System.Int32,System.String)">
            <summary>
            Sets the global modifier text of an <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/>
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <param name="tooltip">The new modifier text</param>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetMoldCost(System.Int32)">
            <summary>
            Gets the material cost of an <seealso cref="T:TerrariansConstructLib.Items.PartMold"/>
            </summary>
            <param name="partID">The part ID</param>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.SetMoldCost(System.Int32,System.Int32)">
            <summary>
            Sets the material cost for item part molds using the part ID, <paramref name="partID"/>, to <paramref name="materialCost"/>
            </summary>
            <param name="partID">The part ID</param>
            <param name="materialCost">The new global material cost.  The displayed material cost is this value divided by 2</param>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetAmmoName(System.Int32)">
            <summary>
            Gets the name of a registered constructed ammo type
            </summary>
            <param name="constructedAmmoID">The ID of the constructed ammo type to get</param>
            <returns>The name of the registered constructed ammo type, or throws an exception if a constructed ammo type of type <paramref name="constructedAmmoID"/> does not exist</returns>
            <exception cref="T:System.Exception"/>
            <remarks>Note: The input ID does not correlate with <seealso cref="T:Terraria.ID.AmmoID"/> nor <seealso cref="T:Terraria.ID.ItemID"/></remarks>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetAmmoID(System.Int32)">
            <summary>
            Gets the <seealso cref="T:Terraria.ID.ItemID"/>/<seealso cref="T:Terraria.ID.AmmoID"/> of a registered constructed ammo type
            </summary>
            <param name="constructedAmmoID">The ID of the constructed ammo type to get</param>
            <returns>The <seealso cref="T:Terraria.ID.ItemID"/>/<seealso cref="T:Terraria.ID.AmmoID"/> of the registered constructed ammo type, or throws an exception if a constructed ammo type of type <paramref name="constructedAmmoID"/> does not exist</returns>
            <exception cref="T:System.Exception"/>
            <remarks>Note: The input ID does not correlate with <seealso cref="T:Terraria.ID.AmmoID"/> nor <seealso cref="T:Terraria.ID.ItemID"/></remarks>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetAmmoProjectileType(System.Int32)">
            <summary>
            Gets the projectile ID of a registered constructed ammo type
            </summary>
            <param name="constructedAmmoID">The ID of the constructed ammo type to get</param>
            <returns>The <seealso cref="T:Terraria.ID.ItemID"/>/<seealso cref="T:Terraria.ID.AmmoID"/> of the registered constructed ammo type, or throws an exception if a constructed ammo type of type <paramref name="constructedAmmoID"/> does not exist</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemName(System.Int32)">
            <summary>
            Gets the name for a registered item
            </summary>
            <param name="registeredItemID">The ID for the registered item.  Not to be confused with its <seealso cref="T:Terraria.ID.ItemID"/> or <seealso cref="P:Terraria.ModLoader.ModItem.Type"/></param>
            <returns>The name for the registered item</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemInternalName(System.Int32)">
            <summary>
            Gets the internal name for a registered item
            </summary>
            <param name="registeredItemID">The ID for the registered item.  Not to be confused with its <seealso cref="T:Terraria.ID.ItemID"/> or <seealso cref="P:Terraria.ModLoader.ModItem.Type"/></param>
            <returns>The internal name for the registered item</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemValidPartIDs(System.Int32)">
            <summary>
            Gets a clone of the valid part IDs for a registered item
            </summary>
            <param name="registeredItemID">The ID for the registered item.  Not to be confused with its <seealso cref="T:Terraria.ID.ItemID"/> or <seealso cref="P:Terraria.ModLoader.ModItem.Type"/></param>
            <returns>A clone of the valid part IDs for the registered item</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemType(System.Int32)">
            <summary>
            Converts a registered Terrarians' Contruct item ID into its tModLoader item ID
            </summary>
            <param name="registeredItemID">The registered item ID</param>
            <returns>The tModLoader item ID</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.FindItem(System.Int32[])">
            <summary>
            Attempts to find a registered item whose valid part IDs are set to the same values as <paramref name="partIDs"/>
            </summary>
            <param name="partIDs">The part IDs to check</param>
            <returns>A value &gt;= <c>0</c> and &lt; <seealso cref="P:TerrariansConstructLib.Registry.ItemRegistry.Count"/> if successful, <c>-1</c> otherwise</returns>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.TryFindItem(System.Int32[],System.Int32@)">
            <summary>
            Attempts to find a registered item whose valid part IDs are set to the same values as <paramref name="partIDs"/>
            </summary>
            <param name="partIDs">The part IDs to check</param>
            <param name="registeredItemID">A value &gt;= <c>0</c> and &lt; <seealso cref="P:TerrariansConstructLib.Registry.ItemRegistry.Count"/> if successful, <c>-1</c> otherwise</param>
            <returns><see langword="true"/> if the search was successful, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemPart(TerrariansConstructLib.Materials.Material,System.Int32)">
            <summary>
            Gets an <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/> instance clone from a material and part ID
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <returns>The <seealso cref="T:TerrariansConstructLib.Items.ItemPart"/> instance</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemPartItemType(TerrariansConstructLib.Materials.Material,System.Int32)">
            <summary>
            Gets an <seealso cref="T:TerrariansConstructLib.Items.ItemPartItem"/> item type from a material and part ID
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <returns>The <seealso cref="T:TerrariansConstructLib.Items.ItemPartItem"/> item type</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.GetItemPartItem(TerrariansConstructLib.Materials.Material,System.Int32)">
            <summary>
            Gets an <seealso cref="T:TerrariansConstructLib.Items.ItemPartItem"/> item instance (via <seealso cref="M:Terraria.ModLoader.ModContent.GetModItem(System.Int32)"/>) from a material and part ID
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <returns>The <seealso cref="T:TerrariansConstructLib.Items.ItemPartItem"/> item instance</returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:TerrariansConstructLib.CoreLibMod.AddPart(Terraria.ModLoader.Mod,TerrariansConstructLib.Materials.Material,System.Int32,TerrariansConstructLib.ItemPartActionsBuilder,System.String,System.String,System.Nullable{Terraria.ModLoader.StatModifier})">
            <summary>
            Registers a part item for the material, <paramref name="material"/>
            </summary>
            <param name="mod">The mod instance to add the part to</param>
            <param name="material">The material instance</param>
            <param name="partID">The part ID</param>
            <param name="actions">The actions</param>
            <param name="tooltip">The tooltip for this part.  Can be modified via <seealso cref="M:TerrariansConstructLib.Items.ItemPart.SetGlobalTooltip(TerrariansConstructLib.Materials.Material,System.Int32,System.String)"/></param>
            <param name="modifierTextLangKey">The lang key for the <see cref="T:TerrariansConstructLib.API.ModifierText"/>.  If <see langword="null"/>, the item part will have no modifier text.</param>
            <param name="modifierStat">The <seealso cref="T:Terraria.ModLoader.StatModifier"/> for the modifier text.  If <paramref name="modifierTextLangKey"/> is <see langword="null"/>, this parameter is ignored.  Defaults to <seealso cref="F:Terraria.ModLoader.StatModifier.One"/></param>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.pickaxe">
            <summary>
            <see langword="true"/> if a tile was destroyed by a pickaxe
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.axe">
            <summary>
            <see langword="true"/> if a tile was destroyed by an axe
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.hammer">
            <summary>
            <see langword="true"/> if a tile was destroyed by a hammer
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.hammerWall">
            <summary>
            <see langword="true"/> if a wall was destroyed by a hammer
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.DataStructures.TileDestructionContext.damage">
            <summary>
            The calculated damage used to destroy the tile
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.BaseTCItem">
            <summary>
            The base item class for any items that can be created by the Terrarians' Construct Forge UI
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Items.BaseTCItem.CurrentDurability">
            <summary>
            The current durability for the item
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.#ctor(System.Int32)">
            <summary>
            Creates an instance of a <see cref="T:TerrariansConstructLib.Items.BaseTCItem"/> using the data from a registered item ID
            </summary>
            <param name="registeredItemID">The registered item ID</param>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeIsLoadingEnabled(Terraria.ModLoader.Mod)">
            <summary>
            Allows you to safely request whether this item should be autoloaded
            </summary>
            <param name="mod">The mod adding this item</param>
            <returns><see langword="null"/> for the default behaviour (don't autoload item), <see langword="true"/> to let the item autoload or <see langword="false"/> to prevent the item from autoloading</returns>
        </member>
        <member name="P:TerrariansConstructLib.Items.BaseTCItem.RegisteredItemTypeName">
            <summary>
            The name for the item, used in <see cref="M:TerrariansConstructLib.Items.BaseTCItem.SetStaticDefaults"/><br/>
            Defaults to:  <c>CoreLibMod.GetItemName(registeredItemID)</c>
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Items.BaseTCItem.TooltipText">
            <summary>
            The tooltip for the item
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeSetStaticDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.SetStaticDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeSetDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.SetDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyTooltips(System.Collections.Generic.List{Terraria.ModLoader.TooltipLine})">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyTooltips(System.Collections.Generic.List{Terraria.ModLoader.TooltipLine})"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.Clone(Terraria.Item,TerrariansConstructLib.Items.BaseTCItem)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.Clone(Terraria.Item)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyWeaponDamage(Terraria.Player,Terraria.ModLoader.StatModifier@,System.Single@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponDamage(Terraria.Player,Terraria.ModLoader.StatModifier@,System.Single@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyWeaponKnockback(Terraria.Player,Terraria.ModLoader.StatModifier@,System.Single@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponKnockback(Terraria.Player,Terraria.ModLoader.StatModifier@,System.Single@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeModifyWeaponCrit(Terraria.Player,System.Int32@)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.ModifyWeaponCrit(Terraria.Player,System.Int32@)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeHoldItem(Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.HoldItem(Terraria.Player)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeUseItem(Terraria.Player)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.UseItem(Terraria.Player)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeOnHitNPC(Terraria.Player,Terraria.NPC,System.Int32,System.Single,System.Boolean)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.OnHitNPC(Terraria.Player,Terraria.NPC,System.Int32,System.Single,System.Boolean)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeOnHitPvp(Terraria.Player,Terraria.Player,System.Int32,System.Boolean)">
            <inheritdoc cref="M:TerrariansConstructLib.Items.BaseTCItem.OnHitPvp(Terraria.Player,Terraria.Player,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:TerrariansConstructLib.Items.BaseTCItem.SafeOnTileDestroyed(Terraria.Player,System.Int32,System.Int32,TerrariansConstructLib.DataStructures.TileDestructionContext)">
            <summary>
            Allows you to customize what happens when this tool destroys a tile.  This method is called clientside.
            </summary>
            <param name="player">The player doing the mining</param>
            <param name="x">The tile X-coordinate</param>
            <param name="y">The tile Y-coordinate</param>
            <param name="context">The context.  Contains information about what tool type was used to destroy the tile and how much damage was dealt to destroy the tile</param>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartItemFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Item"/> <paramref name="item"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartPlayerFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Player"/> <paramref name="player"/>,
            <see cref="T:Terraria.Item"/> <paramref name="item"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartProjectileFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Projectile"/> <paramref name="projectile"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartProjectileSpawnFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Projectile"/> <paramref name="projectile"/>,
            <see cref="T:Terraria.DataStructures.IEntitySource"/> <paramref name="source"/>,
            <see langword="float"/> <paramref name="X"/>,
            <see langword="float"/> <paramref name="Y"/>,
            <see langword="float"/> <paramref name="SpeedX"/>,
            <see langword="float"/> <paramref name="SpeedY"/>,
            <see langword="int"/> <paramref name="Type"/>,
            <see langword="int"/> <paramref name="Damage"/>,
            <see langword="float"/> <paramref name="KnockBack"/>,
            <see langword="int"/> <paramref name="Owner"/>,
            <see langword="float"/> <paramref name="ai0"/>,
            <see langword="float"/> <paramref name="ai1"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartProjectileHitNPCFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Projectile"/> <paramref name="projectile"/>,
            <see cref="T:Terraria.NPC"/> <paramref name="target"/>,
            <see langword="int"/> <paramref name="damage"/>,
            <see langword="float"/> <paramref name="knockback"/>,
            <see langword="bool"/> <paramref name="crit"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartProjectileHitPlayerFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Projectile"/> <paramref name="projectile"/>,
            <see cref="T:Terraria.Player"/> <paramref name="target"/>,
            <see langword="int"/> <paramref name="damage"/>,
            <see langword="bool"/> <paramref name="crit"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartModifyWeaponDamageFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Player"/> <paramref name="player"/>,
            <see cref="T:Terraria.ModLoader.StatModifier"/> <paramref name="damage"/>,
            <see langword="ref float"/> <paramref name="flat"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartModifyWeaponKnockbackFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Player"/> <paramref name="player"/>,
            <see cref="T:Terraria.ModLoader.StatModifier"/> <paramref name="knockback"/>,
            <see langword="ref float"/> <paramref name="flat"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartModifyWeaponCritFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Player"/> <paramref name="player"/>,
            <see langword="ref int"/> <paramref name="crit"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartToolPowerFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Player"/> <paramref name="player"/>,
            <see cref="T:Terraria.Item"/> <paramref name="item"/>,
            <see cref="T:TerrariansConstructLib.DataStructures.TileDestructionContext"/> <paramref name="context"/>,
            <see langword="ref int"/> <paramref name="power"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartTileDestructionFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Player"/> <paramref name="player"/>,
            <see cref="T:Terraria.Item"/> <paramref name="item"/>,
            <see langword="int"/> <paramref name="x"/>
            <see langword="int"/> <paramref name="y"/>
            <see cref="T:TerrariansConstructLib.DataStructures.TileDestructionContext"/> <paramref name="context"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartItemHitNPCFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Item"/> <paramref name="item"/>,
            <see cref="T:Terraria.Player"/> <paramref name="owner"/>,
            <see cref="T:Terraria.NPC"/> <paramref name="target"/>,
            <see langword="int"/> <paramref name="damage"/>,
            <see langword="float"/> <paramref name="knockback"/>,
            <see langword="bool"/> <paramref name="crit"/>
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPart.PartItemHitPlayerFunc">
            <summary>
            <see langword="int"/> <paramref name="partID"/>,
            <see cref="T:Terraria.Item"/> <paramref name="item"/>,
            <see cref="T:Terraria.Player"/> <paramref name="owner"/>,
            <see cref="T:Terraria.Player"/> <paramref name="target"/>,
            <see langword="int"/> <paramref name="damage"/>,
            <see langword="bool"/> <paramref name="crit"/>
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Items.ItemPart.SetGlobalTooltip(TerrariansConstructLib.Materials.Material,System.Int32,System.String)">
            <summary>
            Sets the global tooltip for item parts using the material, <paramref name="material"/>, and the part ID, <paramref name="partID"/>, to <paramref name="tooltip"/>
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
            <param name="tooltip">The new global tooltip</param>
        </member>
        <member name="M:TerrariansConstructLib.Items.ItemPart.GetGlobalModifierText(TerrariansConstructLib.Materials.Material,System.Int32)">
            <summary>
            Gets the global modifier text for item parts using the material, <paramref name="material"/>, and the part ID, <paramref name="partID"/>
            </summary>
            <param name="material">The material</param>
            <param name="partID">The part ID</param>
        </member>
        <member name="F:TerrariansConstructLib.Items.ItemPart.material">
            <summary>
            The material used to create this item part
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.Items.ItemPart.partID">
            <summary>
            The part type associated with this item part
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.ItemPartItem">
            <summary>
            Represents an instance of an item part item
            </summary>
        </member>
        <member name="F:TerrariansConstructLib.Items.ItemPartItem.part">
            <summary>
            The information for the item part
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Items.PartMold">
            <summary>
            Represents an instance of an item part mold
            </summary>
        </member>
        <member name="P:TerrariansConstructLib.Materials.Material.Type">
            <summary>
            The ID of the item used as the material
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Materials.Material.GetItemName">
            <summary>
            Gets the name for this material
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Materials.Material.AsItem">
            <summary>
            Gets an instance of the item this material references
            </summary>
            <returns>A new <see cref="T:Terraria.Item"/> instance, or <see langword="null"/> if this material is an <seealso cref="T:TerrariansConstructLib.Materials.UnloadedMaterial"/> or <seealso cref="T:TerrariansConstructLib.Materials.UnknownMaterial"/></returns>
        </member>
        <member name="T:TerrariansConstructLib.Materials.UnknownMaterial">
            <summary>
            Represents an unknown material
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Materials.UnloadedMaterial">
            <summary>
            Represents a material that used to be loaded, but no longer is
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Projectiles.BaseTCProjectile">
            <summary>
            The base projectile class for any projectiles fired from Terrarians' Construct weapons
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeIsLoadingEnabled(Terraria.ModLoader.Mod)">
            <summary>
            Allows you to safely request whether this projectile should be autoloaded
            </summary>
            <param name="mod">The mod adding this projectile</param>
            <returns><see langword="null"/> for the default behaviour (don't autoload projectile), <see langword="true"/> to let the projectile autoload or <see langword="false"/> to prevent the projectile from autoloading</returns>
        </member>
        <member name="P:TerrariansConstructLib.Projectiles.BaseTCProjectile.ProjectileTypeName">
            <summary>
            The name for the projectile, used in <see cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SetStaticDefaults"/><br/>
            Defaults to: <c>"Projectile"</c>
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeSetStaticDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SetStaticDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeSetDefaults">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SetDefaults"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeOnHitNPC(Terraria.NPC,System.Int32,System.Single,System.Boolean)">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.OnHitNPC(Terraria.NPC,System.Int32,System.Single,System.Boolean)"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeOnHitPlayer(Terraria.Player,System.Int32,System.Boolean)">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.OnHitPlayer(Terraria.Player,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.SafeAI">
            <inheritdoc cref="M:TerrariansConstructLib.Projectiles.BaseTCProjectile.AI"/>
        </member>
        <member name="T:TerrariansConstructLib.Registry.PartActions">
            <summary>
            A collection of action builders
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Stats.ItemStat">
            <summary>
            An object for displaying stat modifiers in item tooltips
            </summary>
        </member>
        <member name="T:TerrariansConstructLib.Stats.ItemStatCollection">
            <summary>
            A collection of stat modifiers used for formatting tooltips
            </summary>
        </member>
        <member name="M:TerrariansConstructLib.Stats.ItemStatCollection.AddStats(System.String,System.String)">
            <summary>
            Adds the stat information to the internal dictionary
            </summary>
            <param name="baseName">The base name for the stat modifier keys</param>
            <param name="baseLangKey">The base lang key used for the stat modifier keys</param>
            <remarks>The two entries added are intended to be used with <see cref="M:TerrariansConstructLib.Stats.ItemStatCollection.Format(System.String,Terraria.ModLoader.StatModifier)"/></remarks>
        </member>
        <member name="M:TerrariansConstructLib.Stats.ItemStatCollection.AddStat(System.String,System.String)">
            <summary>
            Adds the stat information to the internal dictionary
            </summary>
            <param name="name">The name for the stat modifier key</param>
            <param name="langKey">The lang key used for the stat modifier key</param>
            <remarks>The entry added is intended to be used with <see cref="M:TerrariansConstructLib.Stats.ItemStatCollection.Format(System.String,System.Single)"/></remarks>
        </member>
        <member name="M:TerrariansConstructLib.Utility.DropItem(Terraria.DataStructures.IEntitySource,Terraria.Item,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Spawns a shallow copy of an item in the world
            </summary>
            <param name="source">The entity source</param>
            <param name="item">The item instance</param>
            <param name="rectangle">The area where the item will spawn</param>
        </member>
    </members>
</doc>
